<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="trainerCard.InitialImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>